# -*- coding: utf-8 -*-
"""stockprice_forecast_v2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V7ZHA2xjGBLAcTEXrOSFAaLRIbwA1e8o
"""

# Commented out IPython magic to ensure Python compatibility.

import numpy as np
import pandas as pd
import matplotlib
import matplotlib.pylab as plt
matplotlib.style.use('seaborn')
# %matplotlib inline
from matplotlib.pylab import rcParams
#rcParams['figure.figsize'] = 15, 5
# from plotly.graph_objs import *
# from plotly.offline import init_notebook_mode, iplot, iplot_mpl
# init_notebook_mode()
from tqdm import tqdm
import statsmodels.api as sm
import warnings
warnings.filterwarnings('ignore')

import yfinance as yf
import datetime
TodayDate = datetime.date.today()

# HW first df
df = yf.download("AAPL", start="2015-01-01", end="2022-04-01",group_by="ticker")

# int(len(df2)*0.8) is the same as 1472
X_train, X_test = df[0:1472], df[1472:]
X_train.drop(['Open', 'High', 'Low', 'Adj Close', 'Volume'], axis=1, inplace=True)
X_test.drop(['Open', 'High', 'Low', 'Adj Close', 'Volume'], axis=1, inplace=True)
# X_test.tail(3)

# hw: second df

df2 = yf.download("AAPL", start="2015-01-01", end=TodayDate,group_by="ticker")
df2.tail(3)

X_train2, X_test2 = df2[0:1472], df2[1472:]
X_train2.drop(['Open', 'High', 'Low', 'Adj Close', 'Volume'], axis=1, inplace=True)
X_test2.drop(['Open', 'High', 'Low', 'Adj Close', 'Volume'], axis=1, inplace=True)
# X_train2.tail(3)
#X_test2.tail(3)
# X_test2.to_excel("testingoutput.xlsx")
X_test3 = pd.read_excel('adddates.xlsx', index_col=0)
X_test4 = pd.concat([X_test2, X_test3], ignore_index = False, axis = 0 , join="outer")
# X_test4.tail(3)

plt.figure(figsize =(12, 8));
ax = X_train.plot(grid=True, figsize = (12, 8));
X_test.plot(ax=ax, grid=True);
plt.legend(['X_test', 'X_train']);
plt.show()

pip install pmdarima

from pmdarima.arima import auto_arima

# model build

model = auto_arima(X_train, trace=True, error_action='ignore',suppress_warnings=True)
model.fit(X_train)
forecast = model.predict(n_periods=len(X_test4))
forecast = pd.DataFrame(forecast, index = X_test4.index, columns=['Prediction'])
forecast.tail(5)

# plot the predictions for validation set

plt.plot(X_train, label='Train')
plt.plot(X_test, label='Test')
plt.plot(forecast, label='Prediction')
plt.title('Stock Price Prediction')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend(loc='upper left', fontsize=8)
plt.show()